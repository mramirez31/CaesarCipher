Index: src/CaesarCipher/CaesarCipher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package CaesarCipher;\r\n\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * @Class: CaesarCipher\r\n * @Author: Miguel Ramirez\r\n * @Course: ITEC 2140 Section 05 Spring 2023\r\n * @Written: April 25, 2023\r\n * Description: This program will take in a message and key value from the user that they choose\r\n * and will give out an output that is either an encrypted or decrypted message based off the Caesar Cipher line.\r\n */\r\npublic class CaesarCipher {\r\n    //Field\r\n    //This is creating the instance variable to hold the encryption key(Integer)\r\n    private int shift;\r\n\r\n    //constructor\r\n    //This is creating the constructor that will\r\n    //take in an integer value for the encryption key\r\n    // and initializes the shift instance variable.\r\n    public CaesarCipher(int shift) {\r\n        this.shift = shift;\r\n    }\r\n\r\n    //The method is an encryption method called encrypt.\r\n    //This method will take in the String message of the user to be encrypted and turned\r\n    //into an encrypted message that is then returned to the user as an encrypted String\r\n    //message.\r\n    //This method also implements the caesar Cipher encryption algorithm\r\n    //by shifting each letter or Character of the String message by the shift amount\r\n    //and any non-letters Character Such as spaces, punctuation, and ECT. are left unchanged\r\n    //and is simply appended to the StringBuilder without any modification.\r\n\r\n\r\n    public String encrypt(String message) {\r\n        //Creates a new StringBuilder to hold the encrypted message\r\n        StringBuilder encryptedMessage = new StringBuilder();\r\n        //loops through each character letter from the input message\r\n        //given by the user using the for loop for each character\r\n        // from the message.\r\n        for (char c : message.toCharArray()) {\r\n            //this will check if the character is a letter\r\n            if (Character.isLetter(c)) {\r\n                //This will check if the letter is UpperCase\r\n                int base = Character.isUpperCase(c) ? 'A' : 'a';\r\n                c = (char) ((c - base + shift) % 26 + base);\r\n            }\r\n            //returns if the character is not a letter\r\n            encryptedMessage.append(c);\r\n        }\r\n        //returns an encrypted message as a String Message\r\n        return encryptedMessage.toString();\r\n    }\r\n\r\n    //The Method created is for a decryption method called decrypt that decrypts the\r\n    //Users encrypted message given and gives the user the decrypted Message as a string.\r\n    //This method creates a new CaesarCipher object with a shift value\r\n    //of '26 - shift' as its value. The reason for the value to be\r\n    //'26 - shift' is because to decrypt a message that has already\r\n    //been encrypted using the Caesar Cipher algorithm is that you\r\n    //need to shift the value in the opposite direction meaning\r\n    //that since the message was already shifted from by the 'shift' value\r\n    //already that means the letters were shifted to the right and need\r\n    //to be shifted to the left using the value '26-shift' to make it go\r\n    //left and be able to decrypt the message and get the opposite of an\r\n    // encrypted message or in other terms a decrypted message.\r\n\r\n    public String decrypt(String message) {\r\n        //creates a new CaesarCipher with a value of '26 - shift' to make it go left\r\n        //and get the decrypted message and returned a decrypted String message.\r\n        CaesarCipher decryptedMessage = new CaesarCipher(26 - shift);\r\n        //returns a decrypted String message using the same encrypted method called\r\n        // encrypt but with different shift values.\r\n        return decryptedMessage.encrypt(message);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        // Prompt the user for a message to be encrypted or decrypted\r\n        System.out.print(\"Enter a message to be encrypted or decrypted: \");\r\n        String message = scanner.nextLine();\r\n\r\n        // Prompt the user for an integer key value to be used for encryption or decryption\r\n        System.out.print(\"Enter an integer key value for encryption or decryption: \");\r\n        int key = scanner.nextInt();\r\n\r\n        // Create an instance of the CaesarCipher class with the user-provided key value\r\n        CaesarCipher cipher = new CaesarCipher(key);\r\n\r\n        // Prompt the user for whether to encrypt or decrypt the message\r\n        System.out.print(\"Enter 'E' for encryption or 'D' for decryption: \");\r\n        char choice = scanner.next().charAt(0);\r\n\r\n        // Call the appropriate encrypt or decrypt method of the CaesarCipher instance based on user input\r\n        // Display the resulting encrypted or decrypted message to the user\r\n        String result;\r\n        switch (choice) {\r\n            case 'E':\r\n                result = cipher.encrypt(message);\r\n                System.out.println(\"Your encrypted message: \" + result);\r\n                break;\r\n            case 'D':\r\n                result = cipher.decrypt(message);\r\n                System.out.println(\"Your decrypted message: \" + result);\r\n                break;\r\n            default:\r\n                System.out.println(\"Invalid choice, please try again.\");\r\n        }\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/CaesarCipher/CaesarCipher.java b/src/CaesarCipher/CaesarCipher.java
--- a/src/CaesarCipher/CaesarCipher.java	
+++ b/src/CaesarCipher/CaesarCipher.java	
@@ -1,5 +1,5 @@
 package CaesarCipher;
-
+ 
 import java.util.Scanner;
 
 /**
